apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: kubedb-server
  namespace: ${KUBEDB_NAMESPACE}
  labels:
    app: kubedb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubedb
  template:
    metadata:
      labels:
        app: kubedb
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      serviceAccountName: ${KUBEDB_SERVICE_ACCOUNT}
      containers:
      - name: server
        args:
        - run
        - --secure-port=8443
        - --audit-log-path=-
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --v=3
        image: kubedb/kubedb-server:canary
        ports:
        - containerPort: 8443
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: kubedb-server-cert
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
---
# kube lacks the service serving cert signer, so provide a manual secret for it
apiVersion: v1
kind: Secret
metadata:
  name: kubedb-server-cert
  namespace: ${KUBEDB_NAMESPACE}
  labels:
    app: kubedb
type: kubernetes.io/tls
data:
  tls.crt: ${TLS_SERVING_CERT}
  tls.key: ${TLS_SERVING_KEY}
---
# to be able to expose TSB inside the cluster
apiVersion: v1
kind: Service
metadata:
  name: kubedb-server
  namespace: ${KUBEDB_NAMESPACE}
  labels:
    app: kubedb
spec:
  ports:
  - name: admission
    port: 443
    targetPort: 8443
  selector:
    app: kubedb
---
# register as aggregated apiserver
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1alpha1.admission.kubedb.com
  labels:
    app: kubedb
spec:
  caBundle: ${SERVICE_SERVING_CERT_CA}
  group: admission.kubedb.com
  groupPriorityMinimum: 1000
  versionPriority: 15
  service:
    name: kubedb-server
    namespace: ${KUBEDB_NAMESPACE}
  version: v1alpha1
---
# register to intercept kubedb CRD creates / updates
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: admission.kubedb.com
  labels:
    app: kubedb
webhooks:
- name: elasticsearch.admission.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.kubedb.com/v1alpha1/elasticsearchreviews
    caBundle: ${KUBE_CA}
  rules:
  - apiGroups: ["kubedb.com"]
    apiVersions: ["*"]
    resources: ["elasticsearches"]
    operations: ["CREATE", "UPDATE", "DELETE"]
  failurePolicy: Fail
- name: postgres.admission.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.kubedb.com/v1alpha1/postgresreviews
    caBundle: ${KUBE_CA}
  rules:
  - apiGroups: ["kubedb.com"]
    apiVersions: ["*"]
    resources: ["postgreses"]
    operations: ["CREATE", "UPDATE", "DELETE"]
  failurePolicy: Fail
- name: mysql.admission.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.kubedb.com/v1alpha1/mysqlreviews
    caBundle: ${KUBE_CA}
  rules:
  - apiGroups: ["kubedb.com"]
    apiVersions: ["*"]
    resources: ["mysqls"]
    operations: ["CREATE", "UPDATE", "DELETE"]
  failurePolicy: Fail
- name: mongodb.admission.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.kubedb.com/v1alpha1/mongodbvalidationreviews
    caBundle: ${KUBE_CA}
  rules:
  - apiGroups: ["kubedb.com"]
    apiVersions: ["*"]
    resources: ["mongodbs"]
    operations: ["CREATE", "UPDATE", "DELETE"]
  failurePolicy: Fail
- name: redis.admission.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.kubedb.com/v1alpha1/redisreviews
    caBundle: ${KUBE_CA}
  rules:
  - apiGroups: ["kubedb.com"]
    apiVersions: ["*"]
    resources: ["redises"]
    operations: ["CREATE", "UPDATE", "DELETE"]
  failurePolicy: Fail
- name: memcached.admission.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.kubedb.com/v1alpha1/memcachedreviews
    caBundle: ${KUBE_CA}
  rules:
  - apiGroups: ["kubedb.com"]
    apiVersions: ["*"]
    resources: ["memcacheds"]
    operations: ["CREATE", "UPDATE", "DELETE"]
  failurePolicy: Fail
- name: snapshot.admission.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.kubedb.com/v1alpha1/snapshotreviews
    caBundle: ${KUBE_CA}
  rules:
  - apiGroups: ["kubedb.com"]
    apiVersions: ["*"]
    resources: ["snapshots"]
    operations: ["CREATE", "UPDATE"]
  failurePolicy: Fail
- name: dormantdatabase.admission.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.kubedb.com/v1alpha1/dormantdatabasereviews
    caBundle: ${KUBE_CA}
  rules:
  - apiGroups: ["kubedb.com"]
    apiVersions: ["*"]
    resources: ["dormantdatabases"]
    operations: ["CREATE", "UPDATE", "DELETE"]
  failurePolicy: Fail
---
# mutating webhook
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: admission.kubedb.com
  labels:
    app: kubedb
webhooks:
- name: mongodb.admission.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.kubedb.com/v1alpha1/mongodbmutationreviews
    caBundle: ${KUBE_CA}
  rules:
  - apiGroups: ["kubedb.com"]
    apiVersions: ["*"]
    resources: ["mongodbs"]
    operations: ["CREATE", "UPDATE", "DELETE"]
  failurePolicy: Fail
